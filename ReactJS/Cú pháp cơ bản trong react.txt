*** Một số extensions trong visual code
- Reactjs code snippets
- Eslint
- Auto close tag
- Auto rename tag
- vscode-icons

*** Extensions chrome
React Developer tools
Redux DevTools
optional: JSONView(format json)

*** Install and create

* React Router
https://reacttraining.com/react-router/web/api/history
install: - npm install react-router-dom --save
		 
* Redux
install: - npm install redux react-redux --save

* Axios API
https://github.com/axios/axios
install: - npm install axios --save

* Material
https://material-ui.com/getting-started/installation/

***Tạo môt class componnent

import React, { Componnent } from 'react'

class ColorPicker extends Componnent {
    render() {
        return (
            <div className="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div id="content" >
                    Nội dung setting
                </div>
            </div>
        );
    }
}

export default ColorPicker;

* Giao tiếp giữa 2 Compenent

- Sử dụng props function để cập nhật cho state của component cha.
- Có thể xem example ở: E:\Document_Reactjs\Setting_Text_Color

* Muốn thêm tham số vào một event trong item có event nào đó
<input onChange={(event) => this.handleChange("second data", event)}>


* Duyệt một array object sử dụng map
	let products = [
		{
			id:1,
			name: 'product1'
		},
		{
			id:1,
			name: 'product1'
		},
		{
			id:1,
			name: 'product1'
		}
	]

    let element = this.state.products.map((product, index) => {
      if(product.status) {
        return (
          <tr key = {index}>
            <td scope="row">{index}</td>
            <td>{product.name}</td>
            <td>{product.price} VND</td>
          </tr>
        )
      }
    });

* Set State

	this.setState({isActive:true});
	
*** Component life cycle
************************************ PHẢI HỌC *****
https://viblo.asia/p/vong-doi-cua-component-new-Qbq5QMYX5D8
Nên sử dụng:

- componentDidMount(): Chỉ xảy ra một lần khi khởi tạo component, sử dụng để get data từ API, update cho state
- componentWillUnmount(): Chỉ xảy ra một lần khi hủy componnent, sử dụng để reset state, remove event đã add
- componentDidUpdate(): Xảy ra khi update đã xong, thực hiện cho một số sự kiện khi render xong như sroll,có thể set state nhưng vẫn thân vòng lặp vô hạn.
- getDerivedStateFromProps(): Xảy ra trước khi render khi có props hoặc state thay đổi. Có thể return state mới ở đây theo props hoặc không thay đổi thì return null.
Lưu ý:  getDeviredStateFromProps là hàm tĩnh,không thể dùng this.setState 


* Sử dụng localStorage
- Lưu ở localStorage khi đóng trình duyệt hay reload sẽ không bị xóa.
- Có thể lưu tới ~5M
- Cú pháp: - Set: localStorage.setItem('keys',value);
		   - Get: localStorage.getItem('keys');
		   - Remove: Set item again
		   
*** PropTypes 
- https://reactjs.org/docs/typechecking-with-proptypes.html
- Sử dụng PropTypes để check kiểu của dử liệu prop chuyền vào

*** React Router
https://reacttraining.com/react-router/web/example/basic
- Nếu muốn dùng các thẻ sau thì import vào
- BrowserRouter as Router: Bao các route lại
- Route: dẫn đến các component tùy chọn. Ex: <Route path="/" exact component={Home} />
- Link: Để không reload lại trang thì dùng thẻ <Link/> thay thế thẻ <a/>. Ex: <Link to="/" className="my-link">Home</Link>
- NavLink: Sử dụng khi cần activeStyle, activeClassName để thay đổi css của Link đang được click. 
  activeClassName thường được sử dụng khi link được click thì thêm class. Ex: <NavLink exact activeClassName="active" to="/contact">Contact</NavLink>
- CustomLink: Sử dụng để custom lại <Link>. Giúp thêm class vào tag khi Link được active. Refer: https://reacttraining.com/react-router/web/api/Route/children-func
- Match: Sử dụng match để lấy trang url hiện tại. Có thể sử dụng để get sản phẩm và hiển thị chi tiết sản phẩm từ đối tượng match này.
- Prompt(Lời nhắc): Giúp hiển thị một alert khi người dùng thoát khỏi trang. vd khi đã nhập text mà bấm thoát trang thì sẻ hỏi có muốn thoát trang hay không?
*** Redux
- Gồm 4 thần chính: action, reducer, store, view
- action: mang thông tin từ người dùng đến reducer
- reducer: quyết định việc thay đổi state trên store như thế nào
- store: nơi lưu các state
- view: nơi sử dụng các state update UI
** Side-Effect
- Là những tác vụ app tương tác với bên ngoài như: call API, đọc ghi file...
- Trong redux thì side-effect thường nằm ở trong action or middleware
- NOTE: không sử lý side-effect ở redux vì reducer phải là pure function

** Middleware
- sử dụng middleware để fetch data. Vì trong redux, một action phải return về một object.

* Redux-thunk
- Giúp có thể gọi một function có call api, async func trong redux
- Chạy trên môi trường javascript

* Redux-saga
- Chạy trên môi trường ES6 vì nó sử dụng generator func làm cốt lõi.
- Sử dụng từ khóa yield và generator function để đơn giản hóa async.
- Giúp rõ ràng hơn trong các bước thực hiện => dễ testing hơn.
- yield* : để nhượng quyền cho generator func khác.
- rootSaga dùng để điều phối và lắng nghe các action (ex: sagaMiddleware.run(rootSaga)).
- fork: Sử dụng để có thể sử dụng nhiều sagas trong redux-saga. Đầu vào của fork là một generator function và nó là một non-blocking,
và nó chỉ lắng nghe được một lần, nếu muốn nhiều lần phải dùng while(true), để không kết thúc function.
- take: Sử dụng để đợi một action được gọi thì làm tiếp những code phía sau. Truyền vào một action type khi dùng. Nó là một blocking.
- call: Sử dụng call để thực thi một function, thường là call api. Nó là một blocking. Khi nào API trả về kết quả thì mới chạy tiếp.
- put: dispatch một action đến reducer
- delay: delay miliseconds trước khi thực hiện một công việc nào đó
- takeLatest: thay thế cho fork, mà không cần sử dụng vòng lặp vô tận như fork, chạy một loạt action và lấy kết quả của cuối cùng. Ex: khi sử dụng search
- takeEvery: ngược lại takeLatest. Chạy mỗi khi gọi action và không quan tâm action trước đã xong hay chưa.
- select: lấy data từ store

*** Một số cách giả lập API
- MockAPI(https://mockapi.io/): sử dụng trên internet, có thể tạo mockApi để deloy web react
- JSON server(https://github.com/typicode/json-server): Sử dụng dưới local, có nhiều tính năng hơn mockAPI

*** Fetch API using Axios
https://github.com/axios/axios

*** ReactJs + Laravel
https://viblo.asia/p/su-dung-reactjs-trong-project-laravel-OeVKBJpdKkW

*** Auth 
https://viblo.asia/p/authorization-voi-jwt-trong-reactredux-app-GrLZD8nOZk0
https://levelup.gitconnected.com/using-jwt-in-your-react-redux-app-for-authorization-d31be51a50d2
https://viblo.asia/p/tai-sao-phai-su-dung-json-web-token-jwt-de-bao-mat-api-maGK787AZj2

** Eslint
- Giúp code chặt chẽ theo rule hơn.
* Install: 
- npm install eslint --save-dev
- cài đặt eslint trong extensions
- npm install eslint babel-eslint --save-dev ( để có thể using es6)
- tạo file .eslintrc.js cùng cấp với package.json
- code trong file: ex : 
	module.exports = {
		parser: "babel-eslint",
		rules: {
			semi: 1,
			quotes: [2, 'single']
		}
	};
- Sử dụng eslint-plugin-react(https://github.com/yannickcr/eslint-plugin-react) để check proptypes
- Sử dụng eslint-config-airbnb để thêm một số rule về space, v.v (https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb), nên lược bỏ một số rule không cần thiết

** Prettier
- Tích hợp Prettier để kết hợp eslint format code theo rule, và thêm một số rule (eslint-config-prettier, eslint-plugin-prettier, prettier) (https://prettier.io/docs/en/integrating-with-linters.html)

** Husky
- Tích hợp husky để giúp check eslint và prettier xong mới cho commit code lên git.
- install npm install --save-dev husky lint-staged (https://www.npmjs.com/package/husky)
- Tích hợp thêm lint-staged để gọi npm run (https://www.npmjs.com/package/lint-staged)
- note: thêm vào package.json

** Editor config extensions
- Giúp cấu hình file code ( vd: space 2, độ dài tối đa dòng code: 80, v.v)
- Copy tại: https://github.com/facebook/react/blob/master/.editorconfig
		 


