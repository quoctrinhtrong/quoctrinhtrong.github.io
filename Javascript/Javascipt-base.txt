https://viblo.asia/p/mot-so-ham-huu-ich-de-xu-ly-mang-trong-javascript-Az45bW06KxY
https://viblo.asia/p/mot-so-ham-javascript-huu-ich-ve-array-va-object-bWrZnggOlxw

Question
https://viblo.asia/p/javascript-va-nhung-cau-hoi-kho-part-1-E375zgyjKGW
https://viblo.asia/p/mot-vai-cau-hoi-ve-javascript-ma-mot-intern-fresher-can-biet-khi-di-phong-van-L4x5x1agKBM


*pure function là gì?
**array.filter
**array.map
**array.reduce
**array.sort
**promise
**async/await (https://viblo.asia/p/js-promise-va-asyncawait-cuoc-chien-khong-hoi-ket-hay-la-su-dong-hanh-dang-ghi-nhan-4P856OjBKY3)
** Generator function (https://developer.mozilla.org/vi/docs/Web/JavaScript/Reference/Statements/function*) - (https://davidwalsh.name/es6-generators)

var array1 = [{id:1, status: false}, {id:4, status: false}]
var array2= [{id:2, status: true},{id:3, status: true}]

// spread operator ES6
array1 = [...array1, ...array2];
console.log(array1);

**array.map
// Update, change data in item
array1 = array1.map((item) => {
  if(item.id === 2){
    item.status = false;
  }
  return item;
});
console.log(array1);

**array.filter
// get item have status = false
array1 = array1.filter(item => {
  return item.status === false;
});
console.log(array1);

**array.reduce
// Count status = false
let count = array1.reduce((acc, curr)=> {
  return acc + (curr.status === false ? 1: 0);
} , 0);
console.log(count);


**array.sort
array1.sort((a,b) => {
  if(a.id > b.id) return 1;
  if(a.id < b.id) return -1;
  return 0;
});
console.log(array1);



**array.reduce

const array1 = [1,10, 2,8, 3,9, 10];
var max = 0;

// Tìm index của tích 2 số liền nhau lớn nhất
const reducer = (accumulator, currentValue, currentIndex,array) => {
  if(currentIndex != array.length) {
  	if(currentValue*array[currentIndex+1] > max) {
    	accumulator.index1 = currentIndex;
    	accumulator.index2 = currentIndex+1;
        max = currentValue*array[currentIndex+1];
  	}
  }
  return accumulator;
};

// Tìm số lớn thứ 2 trong mảng
const findSecondMax = (accumulator, currentValue,currentIndex,array) => {
  if(currentValue > accumulator.max1) {
    accumulator.max2 = accumulator.max1;
    accumulator.max1 = currentValue;
  } else if(currentValue > accumulator.max2 && currentValue != accumulator.max1) {
    accumulator.max2 = currentValue;
  }
  return accumulator;
};

console.log(array1.reduce(reducer, {index1: 0, index2: 0}));
//expected output: {index1: 5, index2: 6}

console.log(array1.reduce(findSecondMax, {max1: 0, max2: 0}));
// expected output: max1: 9, max2: 10


